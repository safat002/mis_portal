# Generated by Django 4.2.7 on 2025-09-24 18:08

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254,
                        unique=True,
                        validators=[django.core.validators.EmailValidator()],
                    ),
                ),
                (
                    "user_type",
                    models.CharField(
                        choices=[
                            ("Admin", "Administrator"),
                            ("Moderator", "Moderator"),
                            ("Uploader", "Uploader"),
                            ("User", "Regular User"),
                            ("Viewer", "Read-Only User"),
                        ],
                        default="User",
                        max_length=20,
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Enter a valid phone number",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                    ),
                ),
                ("department", models.CharField(blank=True, max_length=100)),
                ("job_title", models.CharField(blank=True, max_length=100)),
                (
                    "theme_preference",
                    models.CharField(
                        choices=[
                            ("light", "Light Theme"),
                            ("dark", "Dark Theme"),
                            ("corporate", "Corporate Theme"),
                            ("ocean_blue", "Ocean Blue"),
                            ("royal_purple", "Royal Purple"),
                            ("sunset_orange", "Sunset Orange"),
                        ],
                        default="corporate",
                        max_length=20,
                    ),
                ),
                ("user_timezone", models.CharField(default="UTC", max_length=50)),
                ("language", models.CharField(default="en", max_length=10)),
                (
                    "default_database",
                    models.CharField(
                        default="default",
                        help_text="Default database connection",
                        max_length=50,
                    ),
                ),
                ("pinned_dashboards", models.JSONField(blank=True, default=list)),
                ("pinned_reports", models.JSONField(blank=True, default=list)),
                ("is_email_verified", models.BooleanField(default=False)),
                (
                    "email_verification_token",
                    models.CharField(blank=True, max_length=64),
                ),
                ("password_reset_token", models.CharField(blank=True, max_length=64)),
                ("password_reset_expires", models.DateTimeField(blank=True, null=True)),
                (
                    "last_password_change",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("last_activity", models.DateTimeField(blank=True, null=True)),
                ("login_attempts", models.IntegerField(default=0)),
                ("locked_until", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_users",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "manager",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="subordinates",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "db_table": "users",
                "ordering": ["-date_joined"],
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Dashboard",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("config", models.JSONField(default=dict)),
                ("config_v2", models.JSONField(blank=True, default=dict)),
                ("config_version", models.CharField(default="v1", max_length=10)),
                ("is_public", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("last_accessed", models.DateTimeField(blank=True, null=True)),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="dashboards",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "dashboards",
                "ordering": ["-updated_at"],
            },
        ),
        migrations.CreateModel(
            name="ExternalConnection",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("nickname", models.CharField(max_length=100)),
                (
                    "db_type",
                    models.CharField(
                        choices=[
                            ("postgresql", "PostgreSQL"),
                            ("mysql", "MySQL"),
                            ("sqlite", "SQLite"),
                            ("mssql", "SQL Server"),
                            ("oracle", "Oracle"),
                            ("snowflake", "Snowflake"),
                        ],
                        max_length=20,
                    ),
                ),
                ("host", models.CharField(blank=True, max_length=255)),
                ("port", models.CharField(blank=True, max_length=10)),
                ("username", models.CharField(blank=True, max_length=100)),
                ("password", models.CharField(blank=True, max_length=255)),
                ("db_name", models.CharField(blank=True, max_length=100)),
                ("schema", models.CharField(blank=True, max_length=100)),
                ("filepath", models.CharField(blank=True, max_length=500)),
                ("is_default", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "is_internal",
                    models.BooleanField(
                        default=False, help_text="Internal SQLite database"
                    ),
                ),
                (
                    "hidden_tables",
                    models.TextField(
                        blank=True, help_text="Comma-separated list of tables to hide"
                    ),
                ),
                (
                    "health_status",
                    models.CharField(
                        choices=[
                            ("healthy", "Healthy"),
                            ("unhealthy", "Unhealthy"),
                            ("error", "Error"),
                            ("unknown", "Unknown"),
                        ],
                        default="unknown",
                        max_length=20,
                    ),
                ),
                ("last_health_check", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="connections",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "external_connections",
                "ordering": ["nickname"],
            },
        ),
        migrations.CreateModel(
            name="GroupMembership",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("member", "Member"),
                            ("admin", "Group Admin"),
                            ("owner", "Group Owner"),
                        ],
                        default="member",
                        max_length=20,
                    ),
                ),
                ("joined_at", models.DateTimeField(auto_now_add=True)),
                (
                    "added_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="added_memberships",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "group_memberships",
                "ordering": ["-joined_at"],
            },
        ),
        migrations.CreateModel(
            name="ReportShare",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "permission",
                    models.CharField(
                        choices=[("view", "View Only"), ("edit", "Can Edit")],
                        default="view",
                        max_length=10,
                    ),
                ),
                ("shared_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "report_shares",
            },
        ),
        migrations.CreateModel(
            name="Widget",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("chart", "Chart"),
                            ("table", "Table"),
                            ("metric", "Metric"),
                            ("text", "Text"),
                            ("filter", "Filter"),
                        ],
                        max_length=20,
                    ),
                ),
                ("config", models.JSONField(default=dict)),
                ("position_x", models.IntegerField(default=0)),
                ("position_y", models.IntegerField(default=0)),
                ("width", models.IntegerField(default=4)),
                ("height", models.IntegerField(default=4)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "dashboard",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="widgets",
                        to="mis_app.dashboard",
                    ),
                ),
            ],
            options={
                "db_table": "widgets",
                "ordering": ["position_y", "position_x"],
            },
        ),
        migrations.CreateModel(
            name="UserGroup",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField(blank=True)),
                (
                    "color",
                    models.CharField(
                        default="#007bff",
                        help_text="Hex color code for UI display",
                        max_length=7,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "is_system_group",
                    models.BooleanField(
                        default=False, help_text="System groups cannot be deleted"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_groups",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "parent_group",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="child_groups",
                        to="mis_app.usergroup",
                    ),
                ),
                (
                    "users",
                    models.ManyToManyField(
                        related_name="user_groups",
                        through="mis_app.GroupMembership",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "user_groups",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="SavedReport",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("report_name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("report_config", models.JSONField(default=dict)),
                ("pivot_config", models.JSONField(blank=True, default=dict)),
                ("data_prep_recipe", models.JSONField(blank=True, default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("last_accessed", models.DateTimeField(blank=True, null=True)),
                ("access_count", models.IntegerField(default=0)),
                (
                    "connection",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="mis_app.externalconnection",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="saved_reports",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "shared_with",
                    models.ManyToManyField(
                        related_name="shared_reports",
                        through="mis_app.ReportShare",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "saved_reports",
                "ordering": ["-updated_at"],
            },
        ),
        migrations.AddField(
            model_name="reportshare",
            name="report",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="mis_app.savedreport"
            ),
        ),
        migrations.AddField(
            model_name="reportshare",
            name="shared_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="shared_reports_by",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="reportshare",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("message", models.TextField()),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("info", "Information"),
                            ("warning", "Warning"),
                            ("error", "Error"),
                            ("success", "Success"),
                            ("system", "System"),
                        ],
                        default="info",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("normal", "Normal"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="normal",
                        max_length=10,
                    ),
                ),
                ("is_read", models.BooleanField(default=False)),
                ("read_at", models.DateTimeField(blank=True, null=True)),
                ("action_url", models.URLField(blank=True)),
                ("action_text", models.CharField(blank=True, max_length=50)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                (
                    "recipient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "notifications",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="GroupPermission",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "resource_type",
                    models.CharField(
                        choices=[
                            ("connection", "Database Connection"),
                            ("table", "Database Table"),
                            ("report", "Report"),
                            ("dashboard", "Dashboard"),
                            ("system", "System Function"),
                            ("data_model", "Data Model"),
                            ("data_management", "Data Management"),
                            ("database_management", "Database Management"),
                            ("user_management", "User Management"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "resource_id",
                    models.CharField(
                        blank=True,
                        help_text="ID of specific resource (optional)",
                        max_length=255,
                    ),
                ),
                (
                    "resource_name",
                    models.CharField(
                        help_text="Name/identifier of the resource", max_length=255
                    ),
                ),
                (
                    "permission_level",
                    models.CharField(
                        choices=[
                            ("none", "No Access"),
                            ("view", "View Only"),
                            ("edit", "Edit"),
                            ("admin", "Full Admin"),
                        ],
                        default="view",
                        max_length=10,
                    ),
                ),
                (
                    "conditions",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional permission conditions",
                    ),
                ),
                (
                    "is_inherited",
                    models.BooleanField(
                        default=False, help_text="Inherited from parent group"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "granted_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="permissions",
                        to="mis_app.usergroup",
                    ),
                ),
            ],
            options={
                "db_table": "group_permissions",
            },
        ),
        migrations.AddField(
            model_name="groupmembership",
            name="group",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="mis_app.usergroup"
            ),
        ),
        migrations.AddField(
            model_name="groupmembership",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.CreateModel(
            name="ExportHistory",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("filename", models.CharField(max_length=255)),
                (
                    "format_type",
                    models.CharField(
                        choices=[
                            ("csv", "CSV"),
                            ("excel", "Excel"),
                            ("pdf", "PDF"),
                            ("json", "JSON"),
                        ],
                        max_length=10,
                    ),
                ),
                ("row_count", models.IntegerField()),
                ("file_size", models.BigIntegerField(help_text="File size in bytes")),
                ("source_type", models.CharField(max_length=50)),
                ("source_id", models.CharField(blank=True, max_length=255)),
                ("source_name", models.CharField(max_length=255)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("downloaded_at", models.DateTimeField(blank=True, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="exports",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "export_history",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="DrillDownPath",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("table_name", models.CharField(max_length=100)),
                (
                    "field_order",
                    models.TextField(
                        help_text="Comma-separated field names in drill-down order"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "connection",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="mis_app.externalconnection",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "drill_down_paths",
            },
        ),
        migrations.CreateModel(
            name="DashboardShare",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "permission",
                    models.CharField(
                        choices=[("view", "View Only"), ("edit", "Can Edit")],
                        default="view",
                        max_length=10,
                    ),
                ),
                ("shared_at", models.DateTimeField(auto_now_add=True)),
                (
                    "dashboard",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="mis_app.dashboard",
                    ),
                ),
                (
                    "shared_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="shared_dashboards_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "dashboard_shares",
            },
        ),
        migrations.CreateModel(
            name="DashboardDataContext",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("context_data", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "dashboard",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="data_context",
                        to="mis_app.dashboard",
                    ),
                ),
            ],
            options={
                "db_table": "dashboard_data_contexts",
            },
        ),
        migrations.AddField(
            model_name="dashboard",
            name="shared_with",
            field=models.ManyToManyField(
                related_name="shared_dashboards",
                through="mis_app.DashboardShare",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="ConnectionJoin",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("left_table", models.CharField(max_length=100)),
                ("left_column", models.CharField(max_length=100)),
                ("right_table", models.CharField(max_length=100)),
                ("right_column", models.CharField(max_length=100)),
                (
                    "join_type",
                    models.CharField(
                        choices=[
                            ("INNER", "Inner Join"),
                            ("LEFT", "Left Join"),
                            ("RIGHT", "Right Join"),
                            ("FULL", "Full Outer Join"),
                        ],
                        default="INNER",
                        max_length=10,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "connection",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="mis_app.externalconnection",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "connection_joins",
            },
        ),
        migrations.CreateModel(
            name="CleanedDataSource",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("view_name", models.CharField(max_length=200)),
                ("config_json", models.JSONField(default=dict)),
                ("recipe_json", models.JSONField(default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "connection",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="mis_app.externalconnection",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "cleaned_data_sources",
            },
        ),
        migrations.CreateModel(
            name="CanvasLayout",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("layout_data", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "dashboard",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="canvas_layout",
                        to="mis_app.dashboard",
                    ),
                ),
            ],
            options={
                "db_table": "canvas_layouts",
            },
        ),
        migrations.CreateModel(
            name="AuditLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        help_text="Cached username in case user is deleted",
                        max_length=150,
                    ),
                ),
                ("session_id", models.CharField(blank=True, max_length=40)),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("create", "Create"),
                            ("update", "Update"),
                            ("delete", "Delete"),
                            ("login", "Login"),
                            ("logout", "Logout"),
                            ("access", "Access"),
                            ("export", "Export"),
                            ("import", "Import"),
                            ("share", "Share"),
                            ("permission_change", "Permission Change"),
                            ("upload", "Upload"),
                            ("download", "Download"),
                        ],
                        max_length=20,
                    ),
                ),
                ("object_type", models.CharField(blank=True, max_length=50)),
                ("object_id", models.CharField(blank=True, max_length=255)),
                ("object_name", models.CharField(blank=True, max_length=255)),
                ("details", models.JSONField(blank=True, default=dict)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                ("old_values", models.JSONField(blank=True, default=dict)),
                ("new_values", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "audit_logs",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="UserPermission",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "resource_type",
                    models.CharField(
                        choices=[
                            ("connection", "Database Connection"),
                            ("table", "Database Table"),
                            ("report", "Report"),
                            ("dashboard", "Dashboard"),
                            ("system", "System Function"),
                            ("data_model", "Data Model"),
                            ("data_management", "Data Management"),
                            ("database_management", "Database Management"),
                            ("user_management", "User Management"),
                        ],
                        max_length=30,
                    ),
                ),
                ("resource_id", models.CharField(blank=True, max_length=255)),
                ("resource_name", models.CharField(max_length=255)),
                (
                    "permission_level",
                    models.CharField(
                        choices=[
                            ("none", "No Access"),
                            ("view", "View Only"),
                            ("edit", "Edit"),
                            ("admin", "Full Admin"),
                        ],
                        default="view",
                        max_length=10,
                    ),
                ),
                ("conditions", models.JSONField(blank=True, default=dict)),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True, help_text="Optional expiration date", null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "granted_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="granted_permissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="direct_permissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "user_permissions",
                "unique_together": {("user", "resource_type", "resource_name")},
            },
        ),
        migrations.CreateModel(
            name="UploadedTable",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("table_name", models.CharField(max_length=255)),
                ("original_filename", models.CharField(blank=True, max_length=255)),
                ("row_count", models.IntegerField(default=0)),
                ("column_count", models.IntegerField(default=0)),
                (
                    "file_size",
                    models.BigIntegerField(
                        default=0, help_text="Original file size in bytes"
                    ),
                ),
                ("is_public", models.BooleanField(default=False)),
                ("upload_date", models.DateTimeField(auto_now_add=True)),
                ("last_modified", models.DateTimeField(auto_now=True)),
                ("description", models.TextField(blank=True)),
                ("tags", models.JSONField(blank=True, default=list)),
                (
                    "allowed_groups",
                    models.ManyToManyField(
                        blank=True,
                        related_name="accessible_tables",
                        to="mis_app.usergroup",
                    ),
                ),
                (
                    "connection",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="mis_app.externalconnection",
                    ),
                ),
                (
                    "uploaded_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="uploaded_tables",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "uploaded_tables",
                "ordering": ["-upload_date"],
                "indexes": [
                    models.Index(
                        fields=["uploaded_by", "-upload_date"],
                        name="uploaded_ta_uploade_1a65ac_idx",
                    ),
                    models.Index(
                        fields=["connection", "table_name"],
                        name="uploaded_ta_connect_865d21_idx",
                    ),
                ],
                "unique_together": {("connection", "table_name")},
            },
        ),
        migrations.AddIndex(
            model_name="savedreport",
            index=models.Index(
                fields=["owner", "-updated_at"], name="saved_repor_owner_i_b453fd_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="savedreport",
            index=models.Index(
                fields=["connection"], name="saved_repor_connect_5ecb7c_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="savedreport",
            unique_together={("owner", "report_name")},
        ),
        migrations.AlterUniqueTogether(
            name="reportshare",
            unique_together={("report", "user")},
        ),
        migrations.AddIndex(
            model_name="notification",
            index=models.Index(
                fields=["recipient", "is_read", "-created_at"],
                name="notificatio_recipie_dde14f_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="grouppermission",
            index=models.Index(
                fields=["resource_type", "resource_name"],
                name="group_permi_resourc_31222d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="grouppermission",
            index=models.Index(
                fields=["permission_level"], name="group_permi_permiss_9f0dcd_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="grouppermission",
            unique_together={("group", "resource_type", "resource_name")},
        ),
        migrations.AlterUniqueTogether(
            name="groupmembership",
            unique_together={("user", "group")},
        ),
        migrations.AddIndex(
            model_name="externalconnection",
            index=models.Index(
                fields=["owner", "is_active"], name="external_co_owner_i_81f239_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="externalconnection",
            index=models.Index(
                fields=["is_default"], name="external_co_is_defa_3ca809_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="externalconnection",
            unique_together={("owner", "nickname")},
        ),
        migrations.AddIndex(
            model_name="exporthistory",
            index=models.Index(
                fields=["user", "-created_at"], name="export_hist_user_id_d3e7d2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="exporthistory",
            index=models.Index(
                fields=["format_type"], name="export_hist_format__40e5ac_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="drilldownpath",
            unique_together={("connection", "table_name")},
        ),
        migrations.AlterUniqueTogether(
            name="dashboardshare",
            unique_together={("dashboard", "user")},
        ),
        migrations.AddIndex(
            model_name="dashboard",
            index=models.Index(
                fields=["owner", "-updated_at"], name="dashboards_owner_i_12bbfc_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dashboard",
            index=models.Index(
                fields=["is_public"], name="dashboards_is_publ_3ef35f_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="connectionjoin",
            unique_together={
                (
                    "connection",
                    "left_table",
                    "left_column",
                    "right_table",
                    "right_column",
                )
            },
        ),
        migrations.AlterUniqueTogether(
            name="cleaneddatasource",
            unique_together={("owner", "name")},
        ),
        migrations.AddIndex(
            model_name="auditlog",
            index=models.Index(
                fields=["user", "-created_at"], name="audit_logs_user_id_6193b2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="auditlog",
            index=models.Index(
                fields=["action", "-created_at"], name="audit_logs_action_bcaa71_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="auditlog",
            index=models.Index(
                fields=["object_type", "-created_at"],
                name="audit_logs_object__a0c19a_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="auditlog",
            index=models.Index(
                fields=["ip_address", "-created_at"],
                name="audit_logs_ip_addr_190b84_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["user_type"], name="users_user_ty_578f8f_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["department"], name="users_departm_d50da8_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["is_active", "user_type"], name="users_is_acti_e1f8d6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["email"], name="users_email_4b85f2_idx"),
        ),
    ]
